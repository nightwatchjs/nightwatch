var http = require('http');
var mocks = null;

function mockServer(options) {
    // The default options:
    var defaultOptions = {
      postdata: "",
      weakURLVerification: false,
      responseHeaders: {},
      responseType: "application/json"
    };

    for (var k in defaultOptions) {
      options[k] = (options[k] || defaultOptions[k]);
    }

    if (Array.isArray(options.mocks)) {
      mocks = options.mocks;
    }
    // Prepare the next request:
    function nextInLine(req, postdata) {
      var mockFound = false;

      mocks.forEach(function(item) {
        item.postdata = item.postdata || "";
        item.method = item.method || "POST";
        item.statusCode = item.statusCode || 200;

        if (item.url == req.url && item.method == req.method && item.postdata == postdata) {
          item.responseHeaders = item.responseHeaders || {};
          item.response = item.response || "";
          mockFound = item;
        }
      });
      return mockFound;
    }

    var s = http.createServer(function(req, res) {
      var postdata = "";
      var headers;
      req.setEncoding('utf8');
      req.on('data', function(chunk) {
        postdata += chunk;
      });
      req.on('end', function() {
        var item = nextInLine(req, postdata);
        var responsedata = '';
        if (item) {
          headers = item.responseHeaders;
          headers['Content-Type']   = options.responseType;
          headers['Content-Length'] = item.response.length;
          res.writeHead(Number(item.statusCode), headers);
          responsedata = item.response;
        } else {
          headers = {};
          headers['Content-Type'] = options.responseType;
          headers['Content-Length'] = 0;
          res.writeHead(200, "OK", headers);
        }

        if (typeof options.finishedCallback == 'function') {
          options.finishedCallback(req, res);
        }
        res.end(responsedata);
      });
    });

    s.listen(options.port, function() {
      options.listenCallback = options.listenCallback || function() {};
      options.listenCallback();
    });

    return s;
}

module.exports = {
  init : function() {
    var mockoptions = require('../mocks.json');
    try {
      var i = new mockServer(mockoptions);
    } catch (err) {
      console.log(err)
    }
    return i;
  },
  addMock : function(mock) {
    if (Array.isArray(mocks)) {
      mocks.push(mock);
      return true;
    }
    return false;
  }
};
